from aiogram import Router, types, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from service import get_list_from_excel, send_bad_feedback_by_sku
from keyboards.reply import reply_keyboard, reply_keyboard_remove, reply_cancel_keyboard

basic_router = Router()


class ProductState(StatesGroup):
    sku = State()


@basic_router.message(CommandStart())
async def start_command_handler(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä—É üìë"', reply_markup=reply_keyboard)


@basic_router.message(StateFilter(None))
@basic_router.message(F.text.casefold() == '–ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä—É üìë')
async def input_sku_command_handler(message: types.Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ excel —Ñ–∞–π–ª', reply_markup=reply_cancel_keyboard)

    await state.set_state(ProductState.sku)


@basic_router.message(F.text.casefold() == '–æ—Ç–º–µ–Ω–∞ ‚ùå')
async def cancel_command_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=reply_keyboard_remove)


@basic_router.message(ProductState.sku)
async def send_bad_feedback(message: types.Message, state: FSMContext):
    sku_list = await get_list_from_excel(message, state)

    if sku_list is not None:
        for sku in sku_list:
            await send_bad_feedback_by_sku(message, sku)

        await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=reply_keyboard)
